// <auto-generated />
using System;
using CertificatesManager.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CertificatesManager.Migrations
{
    [DbContext(typeof(CertificatesManagerDBContext))]
    [Migration("20191219122510_AddExtension")]
    partial class AddExtension
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CertificatesManager.Models.CertificateDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Environment");

                    b.Property<string>("Extension");

                    b.Property<DateTime>("From");

                    b.Property<string>("Guid");

                    b.Property<string>("InstallationLink");

                    b.Property<string>("Issuer");

                    b.Property<string>("Location");

                    b.Property<string>("Name");

                    b.Property<string>("OtherInfo");

                    b.Property<string>("Password");

                    b.Property<string>("Purpose");

                    b.Property<string>("SerialNumber");

                    b.Property<string>("SubjectName");

                    b.Property<DateTime>("To");

                    b.HasKey("Id");

                    b.ToTable("CertificateDetails");
                });

            modelBuilder.Entity("CertificatesManager.Models.CertificateDetailServer", b =>
                {
                    b.Property<int>("CertificateDetailId");

                    b.Property<int>("ServerId");

                    b.HasKey("CertificateDetailId", "ServerId");

                    b.HasIndex("ServerId");

                    b.ToTable("CertificateDetailServer");
                });

            modelBuilder.Entity("CertificatesManager.Models.CertificateDetailSystem", b =>
                {
                    b.Property<int>("CertificateDetailId");

                    b.Property<int>("SystemId");

                    b.HasKey("CertificateDetailId", "SystemId");

                    b.HasIndex("SystemId");

                    b.ToTable("CertificateDetailSystem");
                });

            modelBuilder.Entity("CertificatesManager.Models.Server", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Server");
                });

            modelBuilder.Entity("CertificatesManager.Models.System", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("System");
                });

            modelBuilder.Entity("CertificatesManager.Models.CertificateDetailServer", b =>
                {
                    b.HasOne("CertificatesManager.Models.CertificateDetail", "CertificateDetail")
                        .WithMany("Servers")
                        .HasForeignKey("CertificateDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CertificatesManager.Models.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CertificatesManager.Models.CertificateDetailSystem", b =>
                {
                    b.HasOne("CertificatesManager.Models.CertificateDetail", "CertificateDetail")
                        .WithMany("Systems")
                        .HasForeignKey("CertificateDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CertificatesManager.Models.System", "System")
                        .WithMany()
                        .HasForeignKey("SystemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
